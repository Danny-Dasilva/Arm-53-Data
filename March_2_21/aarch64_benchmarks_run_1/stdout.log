Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A35
Stepping:            r0p1
CPU max MHz:         1300.0000
CPU min MHz:         598.0000
BogoMIPS:            26.00
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
================================================================================
/home/mendel/sd_card/i-benchmarks/word2vec/bin
perf stat -o ../data/word2vec_perf_output_1614732211565345644.txt --per-core -a taskset -c 0-3 ./word2vec -train ../data/text8_1.7mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_1.7mb
Vocab size: 5847
Words in train file: 252418
Alpha: 0.000175  Progress: 99.92%  Words/thread/sec: 10.93k  # started on Wed Mar  3 00:43:31 2021


 Performance counter stats for 'system wide':

S0-C0           1          91,276.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             10,895      context-switches          #    0.119 K/sec                  
S0-C0           1                325      cpu-migrations            #    0.004 K/sec                  
S0-C0           1                  7      page-faults               #    0.000 K/sec                  
S0-C0           1      2,279,234,967      cycles                    #    0.025 GHz                    
S0-C0           1      2,096,301,963      instructions              #    0.92  insn per cycle         
S0-C0           1      4,148,387,631      branches                  #   45.449 M/sec                  
S0-C0           1         62,544,282      branch-misses             #    1.51% of all branches        
S0-C1           1          91,276.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,265      context-switches          #    0.047 K/sec                  
S0-C1           1                284      cpu-migrations            #    0.003 K/sec                  
S0-C1           1             29,438      page-faults               #    0.323 K/sec                  
S0-C1           1      2,129,682,027      cycles                    #    0.023 GHz                    
S0-C1           1      2,160,930,554      instructions              #    1.01  insn per cycle         
S0-C1           1      4,156,346,156      branches                  #   45.536 M/sec                  
S0-C1           1         61,298,997      branch-misses             #    1.47% of all branches        
S0-C2           1          91,276.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              7,791      context-switches          #    0.085 K/sec                  
S0-C2           1                261      cpu-migrations            #    0.003 K/sec                  
S0-C2           1            100,711      page-faults               #    0.001 M/sec                  
S0-C2           1      2,130,783,637      cycles                    #    0.023 GHz                    
S0-C2           1      3,942,186,881      instructions              #    1.85  insn per cycle         
S0-C2           1      4,257,080,194      branches                  #   46.639 M/sec                  
S0-C2           1         66,755,848      branch-misses             #    1.57% of all branches        
S0-C3           1          91,276.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,090      context-switches          #    0.078 K/sec                  
S0-C3           1                256      cpu-migrations            #    0.003 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      2,021,192,187      cycles                    #    0.022 GHz                    
S0-C3           1      2,066,039,401      instructions              #    1.02  insn per cycle         
S0-C3           1      4,143,288,883      branches                  #   45.393 M/sec                  
S0-C3           1         61,374,318      branch-misses             #    1.48% of all branches        

      91.277954608 seconds time elapsed

perf stat -o ../data/word2vec_perf_output_no_branch_1614732211569622396.txt --per-core -a taskset -c 0-3 ./word2vec_no-guess-branch-probability -train ../data/text8_3.3mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_3.3mb
Vocab size: 9546
Words in train file: 524166
Alpha: 0.000005  Progress: 100.43%  Words/thread/sec: 20.89k  # started on Wed Mar  3 00:45:02 2021


 Performance counter stats for 'system wide':

S0-C0           1         101,685.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             17,231      context-switches          #    0.169 K/sec                  
S0-C0           1                589      cpu-migrations            #    0.006 K/sec                  
S0-C0           1                  7      page-faults               #    0.000 K/sec                  
S0-C0           1      1,680,992,986      cycles                    #    0.017 GHz                    
S0-C0           1      2,564,723,545      instructions              #    1.53  insn per cycle         
S0-C0           1      1,277,334,507      branches                  #   12.562 M/sec                  
S0-C0           1         79,529,990      branch-misses             #    6.23% of all branches        
S0-C1           1         101,685.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,303      context-switches          #    0.052 K/sec                  
S0-C1           1                534      cpu-migrations            #    0.005 K/sec                  
S0-C1           1             29,430      page-faults               #    0.289 K/sec                  
S0-C1           1      1,056,416,454      cycles                    #    0.010 GHz                    
S0-C1           1      2,523,518,952      instructions              #    2.39  insn per cycle         
S0-C1           1      1,270,769,178      branches                  #   12.497 M/sec                  
S0-C1           1         76,180,313      branch-misses             #    5.99% of all branches        
S0-C2           1         101,685.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,898      context-switches          #    0.058 K/sec                  
S0-C2           1                564      cpu-migrations            #    0.006 K/sec                  
S0-C2           1            102,606      page-faults               #    0.001 M/sec                  
S0-C2           1      2,839,688,871      cycles                    #    0.028 GHz                    
S0-C2           1      3,624,586,333      instructions              #    1.28  insn per cycle         
S0-C2           1      1,521,083,097      branches                  #   14.959 M/sec                  
S0-C2           1         81,981,087      branch-misses             #    5.39% of all branches        
S0-C3           1         101,685.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,345      context-switches          #    0.053 K/sec                  
S0-C3           1                514      cpu-migrations            #    0.005 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      2,476,339,542      cycles                    #    0.024 GHz                    
S0-C3           1      3,018,261,003      instructions              #    1.22  insn per cycle         
S0-C3           1      1,276,068,938      branches                  #   12.549 M/sec                  
S0-C3           1         76,537,382      branch-misses             #    6.00% of all branches        

     101.687617945 seconds time elapsed

================================================================================
++ pwd
++ date +%s%N
+ GREP_PERF=/home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614732406462321311.txt
+ NUMBER_OF_THREADS=16
+ getopts t:o:h o
+ case $o in
+ NUMBER_OF_THREADS=4
+ getopts t:o:h o
+ source /etc/profile
+++ id -u
++ '[' 0 -eq 0 ']'
++ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export PATH
++ '[' '' ']'
++ '[' -d /etc/profile.d ']'
++ for i in /etc/profile.d/*.sh
++ '[' -r /etc/profile.d/bash_completion.sh ']'
++ . /etc/profile.d/bash_completion.sh
+++ '[' -n '5.0.3(1)-release' -a -n '' -a -z '' ']'
++ for i in /etc/profile.d/*.sh
++ '[' -r /etc/profile.d/default-lang.sh ']'
++ . /etc/profile.d/default-lang.sh
+++ '[' -z en_US.UTF-8 ']'
++ unset i
+ echo 'perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614732406462321311.txt --per-core -a taskset -c 0-3 ./mpi_grep_benchmark.sh -t 4'
perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614732406462321311.txt --per-core -a taskset -c 0-3 ./mpi_grep_benchmark.sh -t 4
+ perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614732406462321311.txt --per-core -a taskset -c 0-3 ./mpi_grep_benchmark.sh -t 4
+ NUMBER_OF_THREADS=16
+ getopts t:h o
+ case $o in
+ NUMBER_OF_THREADS=4
+ getopts t:h o
+ cd /MicroBenchmark/OfflineAnalytics/Grep
./mpi_grep_benchmark.sh: line 23: cd: /MicroBenchmark/OfflineAnalytics/Grep: No such file or directory
+ INPUT='4\ne'
+ ./run_Grep.sh
+ echo -e '4\ne'
./mpi_grep_benchmark.sh: line 28: ./run_Grep.sh: No such file or directory
+ cd -
/home/mendel/sd_card/i-benchmarks/word2vec/bin
+ '[' -z '' ']'
+ cat /home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614732406462321311.txt
# started on Wed Mar  3 00:46:46 2021


 Performance counter stats for 'system wide':

S0-C0           1              14.63 msec cpu-clock                 #    0.979 CPUs utilized          
S0-C0           1                 18      context-switches          #    0.001 M/sec                  
S0-C0           1                  3      cpu-migrations            #    0.205 K/sec                  
S0-C0           1                 59      page-faults               #    0.004 M/sec                  
S0-C0           1          5,581,281      cycles                    #    0.381 GHz                    
S0-C0           1          1,239,163      instructions              #    0.22  insn per cycle         
S0-C0           1            156,943      branches                  #   10.724 M/sec                  
S0-C0           1             32,464      branch-misses             #   20.69% of all branches        
S0-C1           1              14.63 msec cpu-clock                 #    0.979 CPUs utilized          
S0-C1           1                 29      context-switches          #    0.002 M/sec                  
S0-C1           1                  3      cpu-migrations            #    0.205 K/sec                  
S0-C1           1                104      page-faults               #    0.007 M/sec                  
S0-C1           1          2,885,205      cycles                    #    0.197 GHz                    
S0-C1           1            823,341      instructions              #    0.29  insn per cycle         
S0-C1           1            102,581      branches                  #    7.010 M/sec                  
S0-C1           1             16,620      branch-misses             #   16.20% of all branches        
S0-C2           1              14.64 msec cpu-clock                 #    0.979 CPUs utilized          
S0-C2           1                 12      context-switches          #    0.820 K/sec                  
S0-C2           1                  2      cpu-migrations            #    0.137 K/sec                  
S0-C2           1                193      page-faults               #    0.013 M/sec                  
S0-C2           1         12,424,847      cycles                    #    0.849 GHz                    
S0-C2           1          3,920,262      instructions              #    0.32  insn per cycle         
S0-C2           1            473,157      branches                  #   32.330 M/sec                  
S0-C2           1             87,328      branch-misses             #   18.46% of all branches        
S0-C3           1              14.64 msec cpu-clock                 #    0.979 CPUs utilized          
S0-C3           1                  8      context-switches          #    0.547 K/sec                  
S0-C3           1                  1      cpu-migrations            #    0.068 K/sec                  
S0-C3           1                114      page-faults               #    0.008 M/sec                  
S0-C3           1          2,336,477      cycles                    #    0.160 GHz                    
S0-C3           1            722,545      instructions              #    0.31  insn per cycle         
S0-C3           1             89,725      branches                  #    6.131 M/sec                  
S0-C3           1             13,662      branch-misses             #   15.23% of all branches        

       0.014945513 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/lda_perf_output_1614732406562419299.txt --per-core -a taskset -c 0-3 ./mpi_lda_benchmark.sh -t 4
./mpi_lda_benchmark.sh: line 23: cd: /ComponentBenchmark/OfflineAnalytics/LDA/: No such file or directory
./mpi_lda_benchmark.sh: line 25: ./run_LDA.sh: No such file or directory
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 00:46:46 2021


 Performance counter stats for 'system wide':

S0-C0           1              13.77 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C0           1                 13      context-switches          #    0.944 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.073 K/sec                  
S0-C0           1                163      page-faults               #    0.012 M/sec                  
S0-C0           1          6,616,882      cycles                    #    0.480 GHz                    
S0-C0           1          1,823,759      instructions              #    0.28  insn per cycle         
S0-C0           1            223,165      branches                  #   16.202 M/sec                  
S0-C0           1             38,647      branch-misses             #   17.32% of all branches        
S0-C1           1              13.78 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C1           1                 10      context-switches          #    0.726 K/sec                  
S0-C1           1                  2      cpu-migrations            #    0.145 K/sec                  
S0-C1           1                202      page-faults               #    0.015 M/sec                  
S0-C1           1          9,924,088      cycles                    #    0.720 GHz                    
S0-C1           1          3,371,638      instructions              #    0.34  insn per cycle         
S0-C1           1            407,784      branches                  #   29.598 M/sec                  
S0-C1           1             71,953      branch-misses             #   17.64% of all branches        
S0-C2           1              13.78 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C2           1                  8      context-switches          #    0.581 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.073 K/sec                  
S0-C2           1                 99      page-faults               #    0.007 M/sec                  
S0-C2           1          1,807,911      cycles                    #    0.131 GHz                    
S0-C2           1            592,919      instructions              #    0.33  insn per cycle         
S0-C2           1             73,169      branches                  #    5.310 M/sec                  
S0-C2           1             10,387      branch-misses             #   14.20% of all branches        
S0-C3           1              13.78 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C3           1                 13      context-switches          #    0.944 K/sec                  
S0-C3           1                  1      cpu-migrations            #    0.073 K/sec                  
S0-C3           1                  0      page-faults               #    0.000 K/sec                  
S0-C3           1            808,660      cycles                    #    0.059 GHz                    
S0-C3           1            163,125      instructions              #    0.20  insn per cycle         
S0-C3           1             22,407      branches                  #    1.626 M/sec                  
S0-C3           1              4,745      branch-misses             #   21.18% of all branches        

       0.014102886 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/NaiveBayes_perf_output_1614732406659744172.txt --per-core -a taskset -c 0-3 ./mpi_naive_bayes_benchmark.sh -t 4
./mpi_naive_bayes_benchmark.sh: line 23: cd: /ComponentBenchmark/OfflineAnalytics/NaiveBayes: No such file or directory
./mpi_naive_bayes_benchmark.sh: line 25: mpiexec: command not found

real	0m0.003s
user	0m0.002s
sys	0m0.001s
./mpi_naive_bayes_benchmark.sh: line 25: mpiexec: command not found

real	0m0.002s
user	0m0.000s
sys	0m0.002s
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 00:46:46 2021


 Performance counter stats for 'system wide':

S0-C0           1              14.26 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C0           1                 24      context-switches          #    0.002 M/sec                  
S0-C0           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                198      page-faults               #    0.014 M/sec                  
S0-C0           1          4,341,230      cycles                    #    0.305 GHz                    
S0-C0           1          1,262,909      instructions              #    0.29  insn per cycle         
S0-C0           1            155,463      branches                  #   10.905 M/sec                  
S0-C0           1             22,362      branch-misses             #   14.38% of all branches        
S0-C1           1              14.25 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C1           1                 18      context-switches          #    0.001 M/sec                  
S0-C1           1                  3      cpu-migrations            #    0.210 K/sec                  
S0-C1           1                  0      page-faults               #    0.000 K/sec                  
S0-C1           1          1,286,942      cycles                    #    0.090 GHz                    
S0-C1           1            226,645      instructions              #    0.18  insn per cycle         
S0-C1           1             30,709      branches                  #    2.154 M/sec                  
S0-C1           1              7,794      branch-misses             #   25.38% of all branches        
S0-C2           1              14.25 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C2           1                  9      context-switches          #    0.631 K/sec                  
S0-C2           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                268      page-faults               #    0.019 M/sec                  
S0-C2           1         14,348,548      cycles                    #    1.007 GHz                    
S0-C2           1          4,629,628      instructions              #    0.32  insn per cycle         
S0-C2           1            559,047      branches                  #   39.222 M/sec                  
S0-C2           1             96,278      branch-misses             #   17.22% of all branches        
S0-C3           1              14.25 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C3           1                 12      context-switches          #    0.842 K/sec                  
S0-C3           1                  3      cpu-migrations            #    0.210 K/sec                  
S0-C3           1                  0      page-faults               #    0.000 K/sec                  
S0-C3           1          1,562,918      cycles                    #    0.110 GHz                    
S0-C3           1            240,554      instructions              #    0.15  insn per cycle         
S0-C3           1             31,623      branches                  #    2.219 M/sec                  
S0-C3           1              8,235      branch-misses             #   26.04% of all branches        

       0.014576199 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/wordcounts_perf_output_1614732406757132585.txt --per-core -a taskset -c 0-3 ./mpi_wordcount_benchmark.sh -t 4
./mpi_wordcount_benchmark.sh: line 23: cd: /MicroBenchmark/OfflineAnalytics/WordCount: No such file or directory
./mpi_wordcount_benchmark.sh: line 25: ./run_WordCount.sh: No such file or directory
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 00:46:46 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.42 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C0           1                 10      context-switches          #    0.805 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C0           1                 98      page-faults               #    0.008 M/sec                  
S0-C0           1          2,398,734      cycles                    #    0.193 GHz                    
S0-C0           1            642,541      instructions              #    0.27  insn per cycle         
S0-C0           1             79,397      branches                  #    6.391 M/sec                  
S0-C0           1             12,601      branch-misses             #   15.87% of all branches        
S0-C1           1              12.42 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                 13      context-switches          #    0.001 M/sec                  
S0-C1           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C1           1                111      page-faults               #    0.009 M/sec                  
S0-C1           1          2,562,373      cycles                    #    0.206 GHz                    
S0-C1           1            759,968      instructions              #    0.30  insn per cycle         
S0-C1           1             94,928      branches                  #    7.641 M/sec                  
S0-C1           1             15,217      branch-misses             #   16.03% of all branches        
S0-C2           1              12.42 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C2           1                 11      context-switches          #    0.885 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C2           1                252      page-faults               #    0.020 M/sec                  
S0-C2           1         13,468,282      cycles                    #    1.084 GHz                    
S0-C2           1          4,316,210      instructions              #    0.32  insn per cycle         
S0-C2           1            521,157      branches                  #   41.952 M/sec                  
S0-C2           1             90,022      branch-misses             #   17.27% of all branches        
S0-C3           1              12.42 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                  8      context-switches          #    0.644 K/sec                  
S0-C3           1                  2      cpu-migrations            #    0.161 K/sec                  
S0-C3           1                  0      page-faults               #    0.000 K/sec                  
S0-C3           1          1,330,500      cycles                    #    0.107 GHz                    
S0-C3           1            244,852      instructions              #    0.18  insn per cycle         
S0-C3           1             30,737      branches                  #    2.474 M/sec                  
S0-C3           1              6,514      branch-misses             #   21.19% of all branches        

       0.012734251 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/kmeans_perf_output_1614732406851713805.txt --per-core -a taskset -c 0-3 ./mpi_kmeans_benchmark.sh -t 4
./mpi_kmeans_benchmark.sh: line 24: cd: /ComponentBenchmark/OfflineAnalytics/Kmeans: No such file or directory
./mpi_kmeans_benchmark.sh: line 28: ./run_Kmeans.sh: No such file or directory

real	0m0.003s
user	0m0.003s
sys	0m0.002s
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 00:46:46 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.78 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C0           1                 12      context-switches          #    0.939 K/sec                  
S0-C0           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                 98      page-faults               #    0.008 M/sec                  
S0-C0           1          3,105,363      cycles                    #    0.243 GHz                    
S0-C0           1            792,122      instructions              #    0.26  insn per cycle         
S0-C0           1             97,775      branches                  #    7.649 M/sec                  
S0-C0           1             16,559      branch-misses             #   16.94% of all branches        
S0-C1           1              12.78 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C1           1                 11      context-switches          #    0.860 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.078 K/sec                  
S0-C1           1                 60      page-faults               #    0.005 M/sec                  
S0-C1           1          3,019,086      cycles                    #    0.236 GHz                    
S0-C1           1            806,843      instructions              #    0.27  insn per cycle         
S0-C1           1            102,428      branches                  #    8.012 M/sec                  
S0-C1           1             16,433      branch-misses             #   16.04% of all branches        
S0-C2           1              12.78 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C2           1                 14      context-switches          #    0.001 M/sec                  
S0-C2           1                  4      cpu-migrations            #    0.313 K/sec                  
S0-C2           1                190      page-faults               #    0.015 M/sec                  
S0-C2           1         12,065,552      cycles                    #    0.944 GHz                    
S0-C2           1          3,820,559      instructions              #    0.32  insn per cycle         
S0-C2           1            460,821      branches                  #   36.055 M/sec                  
S0-C2           1             82,678      branch-misses             #   17.94% of all branches        
S0-C3           1              12.78 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C3           1                 15      context-switches          #    0.001 M/sec                  
S0-C3           1                  3      cpu-migrations            #    0.235 K/sec                  
S0-C3           1                109      page-faults               #    0.009 M/sec                  
S0-C3           1          2,936,262      cycles                    #    0.230 GHz                    
S0-C3           1            798,942      instructions              #    0.27  insn per cycle         
S0-C3           1             98,733      branches                  #    7.724 M/sec                  
S0-C3           1             17,219      branch-misses             #   17.44% of all branches        

       0.013086180 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/md5_perf_output_1614732406946184947.txt --per-core -a taskset -c 0-3 ./mpi_md5_benchmark.sh -t 4
./mpi_md5_benchmark.sh: line 24: cd: /MicroBenchmark/OfflineAnalytics/MD5: No such file or directory
./mpi_md5_benchmark.sh: line 25: ./run_MD5.sh: No such file or directory
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 00:46:47 2021


 Performance counter stats for 'system wide':

S0-C0           1              13.54 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C0           1                 13      context-switches          #    0.960 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.074 K/sec                  
S0-C0           1                 99      page-faults               #    0.007 M/sec                  
S0-C0           1          3,163,537      cycles                    #    0.234 GHz                    
S0-C0           1            784,910      instructions              #    0.25  insn per cycle         
S0-C0           1             96,770      branches                  #    7.147 M/sec                  
S0-C0           1             17,654      branch-misses             #   18.24% of all branches        
S0-C1           1              13.54 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C1           1                 12      context-switches          #    0.886 K/sec                  
S0-C1           1                  2      cpu-migrations            #    0.148 K/sec                  
S0-C1           1                111      page-faults               #    0.008 M/sec                  
S0-C1           1          2,394,675      cycles                    #    0.177 GHz                    
S0-C1           1            745,391      instructions              #    0.31  insn per cycle         
S0-C1           1             92,275      branches                  #    6.813 M/sec                  
S0-C1           1             14,622      branch-misses             #   15.85% of all branches        
S0-C2           1              13.54 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C2           1                 12      context-switches          #    0.886 K/sec                  
S0-C2           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                253      page-faults               #    0.019 M/sec                  
S0-C2           1         13,238,047      cycles                    #    0.977 GHz                    
S0-C2           1          4,363,183      instructions              #    0.33  insn per cycle         
S0-C2           1            529,604      branches                  #   39.102 M/sec                  
S0-C2           1             91,343      branch-misses             #   17.25% of all branches        
S0-C3           1              13.54 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C3           1                  8      context-switches          #    0.591 K/sec                  
S0-C3           1                  1      cpu-migrations            #    0.074 K/sec                  
S0-C3           1                  0      page-faults               #    0.000 K/sec                  
S0-C3           1            648,862      cycles                    #    0.048 GHz                    
S0-C3           1            126,410      instructions              #    0.19  insn per cycle         
S0-C3           1             17,832      branches                  #    1.317 M/sec                  
S0-C3           1              3,773      branch-misses             #   21.16% of all branches        

       0.013865729 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/sort_perf_output_1614732407041461330.txt --per-core -a taskset -c 0-3 ./mpi_sort_benchmark.sh -t 4
./mpi_sort_benchmark.sh: line 21: cd: /MicroBenchmark/OfflineAnalytics/Sort: No such file or directory
./mpi_sort_benchmark.sh: line 23: ./run_Sort.sh: No such file or directory

real	0m0.003s
user	0m0.003s
sys	0m0.002s
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 00:46:47 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.59 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C0           1                 17      context-switches          #    0.001 M/sec                  
S0-C0           1                  1      cpu-migrations            #    0.079 K/sec                  
S0-C0           1                 99      page-faults               #    0.008 M/sec                  
S0-C0           1          3,109,418      cycles                    #    0.247 GHz                    
S0-C0           1            757,296      instructions              #    0.24  insn per cycle         
S0-C0           1             95,921      branches                  #    7.621 M/sec                  
S0-C0           1             16,337      branch-misses             #   17.03% of all branches        
S0-C1           1              12.59 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                  6      context-switches          #    0.477 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.079 K/sec                  
S0-C1           1                  0      page-faults               #    0.000 K/sec                  
S0-C1           1          1,103,894      cycles                    #    0.088 GHz                    
S0-C1           1            193,109      instructions              #    0.17  insn per cycle         
S0-C1           1             25,416      branches                  #    2.019 M/sec                  
S0-C1           1              6,113      branch-misses             #   24.05% of all branches        
S0-C2           1              12.59 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C2           1                 11      context-switches          #    0.874 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.079 K/sec                  
S0-C2           1                252      page-faults               #    0.020 M/sec                  
S0-C2           1         13,668,432      cycles                    #    1.086 GHz                    
S0-C2           1          4,323,534      instructions              #    0.32  insn per cycle         
S0-C2           1            522,431      branches                  #   41.510 M/sec                  
S0-C2           1             90,598      branch-misses             #   17.34% of all branches        
S0-C3           1              12.59 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C3           1                 13      context-switches          #    0.001 M/sec                  
S0-C3           1                  2      cpu-migrations            #    0.159 K/sec                  
S0-C3           1                113      page-faults               #    0.009 M/sec                  
S0-C3           1          2,281,841      cycles                    #    0.181 GHz                    
S0-C3           1            727,332      instructions              #    0.32  insn per cycle         
S0-C3           1             89,588      branches                  #    7.117 M/sec                  
S0-C3           1             13,083      branch-misses             #   14.60% of all branches        

       0.012899562 seconds time elapsed

================================================================================
perf stat -o sqlite_4_threads.txt  --per-core -a taskset -c 0-3 ./sqlite_benchmark 4
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................    0.101s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.101s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.103s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.103s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.145s
 120 - 13000 unordered INSERTS with one index/PK...................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.198s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.198s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.198s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.199s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.202s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.201s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.206s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.204s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.329s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.326s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.328s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.334s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.172s
 150 - CREATE INDEX five times.....................................    0.171s
 150 - CREATE INDEX five times.....................................    0.173s
 150 - CREATE INDEX five times.....................................    0.174s
 150 - CREATE INDEX five times.....................................    0.219s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.220s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.220s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.218s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.106s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.106s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.105s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.107s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.104s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.107s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.223s
 180 - 13000 INSERTS with three indexes............................    0.225s
 180 - 13000 INSERTS with three indexes............................    0.225s
 180 - 13000 INSERTS with three indexes............................    0.226s
 180 - 13000 INSERTS with three indexes............................    0.245s
 190 - DELETE and REFILL one table.................................    0.247s
 190 - DELETE and REFILL one table.................................    0.246s
 190 - DELETE and REFILL one table.................................    0.251s
 190 - DELETE and REFILL one table.................................    0.254s
 200 - VACUUM......................................................    0.256s
 200 - VACUUM......................................................    0.253s
 200 - VACUUM......................................................    0.258s
 200 - VACUUM......................................................    0.371s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.371s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.368s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.380s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.088s
 240 - 13000 UPDATES of individual rows............................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.152s
 250 - One big UPDATE of the whole 13000-row table.................    0.153s
 250 - One big UPDATE of the whole 13000-row table.................    0.152s
 250 - One big UPDATE of the whole 13000-row table.................    0.154s
 250 - One big UPDATE of the whole 13000-row table.................    0.043s
 260 - Query added column after filling............................    0.043s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.042s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.045s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.221s
 280 - 13000 DELETEs of individual rows............................    0.219s
 280 - 13000 DELETEs of individual rows............................    0.221s
 280 - 13000 DELETEs of individual rows............................    0.234s
 280 - 13000 DELETEs of individual rows............................    0.203s
 290 - Refill two 13000-row tables using REPLACE...................    0.203s
 290 - Refill two 13000-row tables using REPLACE...................    0.203s
 290 - Refill two 13000-row tables using REPLACE...................    0.209s
 290 - Refill two 13000-row tables using REPLACE...................    0.600s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.602s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.601s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.609s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.278s
 310 - 2600 four-ways joins........................................    0.280s
 310 - 2600 four-ways joins........................................    0.279s
 310 - 2600 four-ways joins........................................    0.292s
 310 - 2600 four-ways joins........................................    0.475s
 320 - subquery in result set......................................    0.480s
 320 - subquery in result set......................................    0.476s
 320 - subquery in result set......................................    0.472s
 320 - subquery in result set......................................    0.903s
 400 - 26000 REPLACE ops on an IPK.................................    0.889s
 400 - 26000 REPLACE ops on an IPK.................................    0.892s
 400 - 26000 REPLACE ops on an IPK.................................    0.912s
 400 - 26000 REPLACE ops on an IPK.................................    0.321s
 410 - 26000 SELECTS on an IPK.....................................    0.321s
 410 - 26000 SELECTS on an IPK.....................................    0.327s
 410 - 26000 SELECTS on an IPK.....................................    0.330s
 410 - 26000 SELECTS on an IPK.....................................    0.205s
 500 - 26000 REPLACE on TEXT PK....................................    0.205s
 500 - 26000 REPLACE on TEXT PK....................................    0.206s
 500 - 26000 REPLACE on TEXT PK....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.326s
 510 - 26000 SELECTS on a TEXT PK..................................    0.328s
 510 - 26000 SELECTS on a TEXT PK..................................    0.330s
 510 - 26000 SELECTS on a TEXT PK..................................    0.329s
 510 - 26000 SELECTS on a TEXT PK..................................    0.332s
 520 - 26000 SELECT DISTINCT.......................................    0.337s
 520 - 26000 SELECT DISTINCT.......................................    0.336s
 520 - 26000 SELECT DISTINCT.......................................    0.337s
 520 - 26000 SELECT DISTINCT.......................................    0.238s
 980 - PRAGMA integrity_check......................................    0.232s
 980 - PRAGMA integrity_check......................................    0.231s
 980 - PRAGMA integrity_check......................................    0.245s
 980 - PRAGMA integrity_check......................................    0.463s
 990 - ANALYZE.....................................................    0.462s
 990 - ANALYZE.....................................................    0.462s
 990 - ANALYZE.....................................................    0.072s
       TOTAL.......................................................    7.714s
   0.072s
       TOTAL.......................................................    7.722s
   0.072s
       TOTAL.......................................................    7.723s
   0.457s
 990 - ANALYZE.....................................................    0.071s
       TOTAL.......................................................    7.823s
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
# started on Wed Mar  3 00:46:47 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,917.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,570      context-switches          #    0.198 K/sec                  
S0-C0           1                107      cpu-migrations            #    0.014 K/sec                  
S0-C0           1              1,853      page-faults               #    0.234 K/sec                  
S0-C0           1      1,619,097,330      cycles                    #    0.204 GHz                    
S0-C0           1        626,422,219      instructions              #    0.39  insn per cycle         
S0-C0           1        610,323,049      branches                  #   77.081 M/sec                  
S0-C0           1         86,769,699      branch-misses             #   14.22% of all branches        
S0-C1           1           7,917.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,518      context-switches          #    0.192 K/sec                  
S0-C1           1                115      cpu-migrations            #    0.015 K/sec                  
S0-C1           1              1,870      page-faults               #    0.236 K/sec                  
S0-C1           1      1,478,598,242      cycles                    #    0.187 GHz                    
S0-C1           1        605,868,334      instructions              #    0.41  insn per cycle         
S0-C1           1        607,634,525      branches                  #   76.742 M/sec                  
S0-C1           1         85,939,150      branch-misses             #   14.14% of all branches        
S0-C2           1           7,917.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                581      context-switches          #    0.073 K/sec                  
S0-C2           1                114      cpu-migrations            #    0.014 K/sec                  
S0-C2           1              1,957      page-faults               #    0.247 K/sec                  
S0-C2           1      1,489,138,442      cycles                    #    0.188 GHz                    
S0-C2           1        601,918,026      instructions              #    0.40  insn per cycle         
S0-C2           1        607,041,371      branches                  #   76.667 M/sec                  
S0-C2           1         86,171,894      branch-misses             #   14.20% of all branches        
S0-C3           1           7,917.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                944      context-switches          #    0.119 K/sec                  
S0-C3           1                106      cpu-migrations            #    0.013 K/sec                  
S0-C3           1              1,862      page-faults               #    0.235 K/sec                  
S0-C3           1      1,490,134,224      cycles                    #    0.188 GHz                    
S0-C3           1        605,114,303      instructions              #    0.41  insn per cycle         
S0-C3           1        607,432,742      branches                  #   76.716 M/sec                  
S0-C3           1         86,320,537      branch-misses             #   14.21% of all branches        

       7.918337207 seconds time elapsed

================================================================================
perf stat -o go_word2vec_4_threads.txt  --per-core -a taskset -c 0-3 ./go_word2vec.sh 4
/home/mendel/sd_card/i-benchmarks/golang/bin
Save trained vectors to example/word_vectors_sg.txt
# started on Wed Mar  3 00:46:55 2021


 Performance counter stats for 'system wide':

S0-C0           1          38,014.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             13,992      context-switches          #    0.368 K/sec                  
S0-C0           1                105      cpu-migrations            #    0.003 K/sec                  
S0-C0           1              1,277      page-faults               #    0.034 K/sec                  
S0-C0           1      4,189,216,442      cycles                    #    0.110 GHz                    
S0-C0           1        601,667,805      instructions              #    0.14  insn per cycle         
S0-C0           1      2,030,971,422      branches                  #   53.426 M/sec                  
S0-C0           1         48,728,376      branch-misses             #    2.40% of all branches        
S0-C1           1          38,014.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1             11,721      context-switches          #    0.308 K/sec                  
S0-C1           1                 99      cpu-migrations            #    0.003 K/sec                  
S0-C1           1             23,056      page-faults               #    0.607 K/sec                  
S0-C1           1      1,050,506,426      cycles                    #    0.028 GHz                    
S0-C1           1        271,040,266      instructions              #    0.26  insn per cycle         
S0-C1           1      2,378,570,926      branches                  #   62.570 M/sec                  
S0-C1           1         78,380,059      branch-misses             #    3.30% of all branches        
S0-C2           1          38,014.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             10,823      context-switches          #    0.285 K/sec                  
S0-C2           1                 97      cpu-migrations            #    0.003 K/sec                  
S0-C2           1                632      page-faults               #    0.017 K/sec                  
S0-C2           1      1,665,078,602      cycles                    #    0.044 GHz                    
S0-C2           1      3,222,792,937      instructions              #    1.94  insn per cycle         
S0-C2           1      1,878,983,798      branches                  #   49.428 M/sec                  
S0-C2           1         33,667,869      branch-misses             #    1.79% of all branches        
S0-C3           1          38,014.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             12,982      context-switches          #    0.341 K/sec                  
S0-C3           1                 64      cpu-migrations            #    0.002 K/sec                  
S0-C3           1              9,064      page-faults               #    0.238 K/sec                  
S0-C3           1      2,622,475,526      cycles                    #    0.069 GHz                    
S0-C3           1      3,779,928,308      instructions              #    1.44  insn per cycle         
S0-C3           1      1,926,710,214      branches                  #   50.683 M/sec                  
S0-C3           1         33,201,603      branch-misses             #    1.72% of all branches        

      38.015480565 seconds time elapsed

================================================================================
================================================================================
Running run_forest_importances_faces test
perf stat -o ../output/run_forest_importances_faces.log --per-core -a taskset -c 0-3 ./run_forest_importances_faces.sh -n 4
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.196s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.197s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.304s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.640s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 00:47:33 2021


 Performance counter stats for 'system wide':

S0-C0           1          22,590.28 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             10,257      context-switches          #    0.454 K/sec                  
S0-C0           1                367      cpu-migrations            #    0.016 K/sec                  
S0-C0           1             39,952      page-faults               #    0.002 M/sec                  
S0-C0           1      2,795,428,027      cycles                    #    0.124 GHz                    
S0-C0           1      2,410,319,004      instructions              #    0.86  insn per cycle         
S0-C0           1        740,659,057      branches                  #   32.787 M/sec                  
S0-C0           1        185,519,057      branch-misses             #   25.05% of all branches        
S0-C1           1          22,590.28 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,149      context-switches          #    0.316 K/sec                  
S0-C1           1                266      cpu-migrations            #    0.012 K/sec                  
S0-C1           1             39,951      page-faults               #    0.002 M/sec                  
S0-C1           1      2,240,380,926      cycles                    #    0.099 GHz                    
S0-C1           1      2,488,840,185      instructions              #    1.11  insn per cycle         
S0-C1           1        749,787,624      branches                  #   33.191 M/sec                  
S0-C1           1        186,540,916      branch-misses             #   24.88% of all branches        
S0-C2           1          22,590.29 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              7,593      context-switches          #    0.336 K/sec                  
S0-C2           1                243      cpu-migrations            #    0.011 K/sec                  
S0-C2           1             40,181      page-faults               #    0.002 M/sec                  
S0-C2           1      2,266,924,441      cycles                    #    0.100 GHz                    
S0-C2           1      2,422,865,984      instructions              #    1.07  insn per cycle         
S0-C2           1        741,207,481      branches                  #   32.811 M/sec                  
S0-C2           1        185,909,012      branch-misses             #   25.08% of all branches        
S0-C3           1          22,590.29 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              8,469      context-switches          #    0.375 K/sec                  
S0-C3           1                223      cpu-migrations            #    0.010 K/sec                  
S0-C3           1             39,326      page-faults               #    0.002 M/sec                  
S0-C3           1      2,155,718,627      cycles                    #    0.095 GHz                    
S0-C3           1      2,413,001,340      instructions              #    1.12  insn per cycle         
S0-C3           1        741,576,542      branches                  #   32.827 M/sec                  
S0-C3           1        184,968,865      branch-misses             #   24.94% of all branches        

      22.590894265 seconds time elapsed

================================================================================
Running run_multioutput_face_completion test
perf stat -o ../output/run_multioutput_face_completion.log --per-core -a taskset -c 0-3 ./run_multioutput_face_completion.sh -n 4
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 00:47:55 2021


 Performance counter stats for 'system wide':

S0-C0           1          54,476.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,293      context-switches          #    0.134 K/sec                  
S0-C0           1                148      cpu-migrations            #    0.003 K/sec                  
S0-C0           1            119,427      page-faults               #    0.002 M/sec                  
S0-C0           1      1,711,787,956      cycles                    #    0.031 GHz                    
S0-C0           1      3,715,901,400      instructions              #    2.17  insn per cycle         
S0-C0           1      1,544,609,737      branches                  #   28.354 M/sec                  
S0-C0           1        148,262,621      branch-misses             #    9.60% of all branches        
S0-C1           1          54,476.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,252      context-switches          #    0.078 K/sec                  
S0-C1           1                112      cpu-migrations            #    0.002 K/sec                  
S0-C1           1            120,154      page-faults               #    0.002 M/sec                  
S0-C1           1      1,701,536,021      cycles                    #    0.031 GHz                    
S0-C1           1      3,767,623,650      instructions              #    2.21  insn per cycle         
S0-C1           1      1,549,964,900      branches                  #   28.452 M/sec                  
S0-C1           1        148,248,275      branch-misses             #    9.56% of all branches        
S0-C2           1          54,476.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,831      context-switches          #    0.107 K/sec                  
S0-C2           1                130      cpu-migrations            #    0.002 K/sec                  
S0-C2           1            120,004      page-faults               #    0.002 M/sec                  
S0-C2           1      1,669,121,912      cycles                    #    0.031 GHz                    
S0-C2           1      3,705,750,347      instructions              #    2.22  insn per cycle         
S0-C2           1      1,542,542,731      branches                  #   28.316 M/sec                  
S0-C2           1        147,696,284      branch-misses             #    9.57% of all branches        
S0-C3           1          54,476.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,854      context-switches          #    0.071 K/sec                  
S0-C3           1                115      cpu-migrations            #    0.002 K/sec                  
S0-C3           1            119,026      page-faults               #    0.002 M/sec                  
S0-C3           1      1,527,367,587      cycles                    #    0.028 GHz                    
S0-C3           1      3,657,383,309      instructions              #    2.39  insn per cycle         
S0-C3           1      1,535,905,288      branches                  #   28.194 M/sec                  
S0-C3           1        146,855,732      branch-misses             #    9.56% of all branches        

      54.477710471 seconds time elapsed

================================================================================
Running run_logistic_path test
perf stat -o ../output/run_logistic_path.log --per-core -a taskset -c 0-3 ./run_logistic_path.sh -n 4
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 34.147s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 34.355s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 34.520s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 34.522s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 00:48:50 2021


 Performance counter stats for 'system wide':

S0-C0           1          41,901.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,997      context-switches          #    0.191 K/sec                  
S0-C0           1                 88      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             23,536      page-faults               #    0.562 K/sec                  
S0-C0           1      2,696,432,097      cycles                    #    0.064 GHz                    
S0-C0           1      4,163,145,036      instructions              #    1.54  insn per cycle         
S0-C0           1      2,621,947,799      branches                  #   62.575 M/sec                  
S0-C0           1        437,204,779      branch-misses             #   16.67% of all branches        
S0-C1           1          41,901.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,156      context-switches          #    0.051 K/sec                  
S0-C1           1                 86      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             26,524      page-faults               #    0.633 K/sec                  
S0-C1           1      2,541,925,256      cycles                    #    0.061 GHz                    
S0-C1           1      4,211,738,447      instructions              #    1.66  insn per cycle         
S0-C1           1      2,629,456,057      branches                  #   62.754 M/sec                  
S0-C1           1        437,570,325      branch-misses             #   16.64% of all branches        
S0-C2           1          41,901.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,446      context-switches          #    0.058 K/sec                  
S0-C2           1                 90      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             20,443      page-faults               #    0.488 K/sec                  
S0-C2           1      2,158,895,066      cycles                    #    0.052 GHz                    
S0-C2           1      4,099,486,721      instructions              #    1.90  insn per cycle         
S0-C2           1      2,612,814,677      branches                  #   62.357 M/sec                  
S0-C2           1        435,311,489      branch-misses             #   16.66% of all branches        
S0-C3           1          41,901.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,446      context-switches          #    0.082 K/sec                  
S0-C3           1                 74      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             25,494      page-faults               #    0.608 K/sec                  
S0-C3           1      2,637,036,221      cycles                    #    0.063 GHz                    
S0-C3           1      4,118,100,200      instructions              #    1.56  insn per cycle         
S0-C3           1      2,616,139,995      branches                  #   62.436 M/sec                  
S0-C3           1        486,009,275      branch-misses             #   18.58% of all branches        

      41.902101936 seconds time elapsed

================================================================================
Running run_plot_svm_nonlinear test
perf stat -o ../output/run_plot_svm_nonlinear.log --per-core -a taskset -c 0-3 ./run_plot_svm_nonlinear.sh -n 4
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 00:49:32 2021


 Performance counter stats for 'system wide':

S0-C0           1          14,900.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              2,876      context-switches          #    0.193 K/sec                  
S0-C0           1                 62      cpu-migrations            #    0.004 K/sec                  
S0-C0           1             28,443      page-faults               #    0.002 M/sec                  
S0-C0           1      1,636,884,433      cycles                    #    0.110 GHz                    
S0-C0           1         39,378,901      instructions              #    0.02  insn per cycle         
S0-C0           1        895,081,417      branches                  #   60.070 M/sec                  
S0-C0           1         78,436,677      branch-misses             #    8.76% of all branches        
S0-C1           1          14,900.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,257      context-switches          #    0.084 K/sec                  
S0-C1           1                 64      cpu-migrations            #    0.004 K/sec                  
S0-C1           1             28,460      page-faults               #    0.002 M/sec                  
S0-C1           1      1,376,593,390      cycles                    #    0.092 GHz                    
S0-C1           1         57,280,208      instructions              #    0.04  insn per cycle         
S0-C1           1        897,467,287      branches                  #   60.230 M/sec                  
S0-C1           1         77,833,715      branch-misses             #    8.67% of all branches        
S0-C2           1          14,900.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,257      context-switches          #    0.084 K/sec                  
S0-C2           1                 67      cpu-migrations            #    0.004 K/sec                  
S0-C2           1             28,798      page-faults               #    0.002 M/sec                  
S0-C2           1      1,457,368,745      cycles                    #    0.098 GHz                    
S0-C2           1         27,344,859      instructions              #    0.02  insn per cycle         
S0-C2           1        894,546,408      branches                  #   60.034 M/sec                  
S0-C2           1         78,139,293      branch-misses             #    8.74% of all branches        
S0-C3           1          14,900.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,390      context-switches          #    0.093 K/sec                  
S0-C3           1                 68      cpu-migrations            #    0.005 K/sec                  
S0-C3           1             28,494      page-faults               #    0.002 M/sec                  
S0-C3           1      1,343,343,870      cycles                    #    0.090 GHz                    
S0-C3           1         11,830,053      instructions              #    0.01  insn per cycle         
S0-C3           1        892,495,714      branches                  #   59.896 M/sec                  
S0-C3           1         78,080,559      branch-misses             #    8.75% of all branches        

      14.901204195 seconds time elapsed

================================================================================
Running run_plot_theilsen test
perf stat -o ../output/run_plot_theilsen.log --per-core -a taskset -c 0-3 ./run_plot_theilsen.sh -n 4
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 00:49:47 2021


 Performance counter stats for 'system wide':

S0-C0           1          35,919.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,119      context-switches          #    0.170 K/sec                  
S0-C0           1                 91      cpu-migrations            #    0.003 K/sec                  
S0-C0           1             41,013      page-faults               #    0.001 M/sec                  
S0-C0           1      2,480,019,937      cycles                    #    0.069 GHz                    
S0-C0           1        863,359,378      instructions              #    0.35  insn per cycle         
S0-C0           1      1,109,820,114      branches                  #   30.897 M/sec                  
S0-C0           1        328,848,481      branch-misses             #   29.63% of all branches        
S0-C1           1          35,919.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,220      context-switches          #    0.062 K/sec                  
S0-C1           1                 68      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             48,492      page-faults               #    0.001 M/sec                  
S0-C1           1      3,063,021,642      cycles                    #    0.085 GHz                    
S0-C1           1      1,157,373,525      instructions              #    0.38  insn per cycle         
S0-C1           1      1,150,749,059      branches                  #   32.037 M/sec                  
S0-C1           1        335,679,509      branch-misses             #   29.17% of all branches        
S0-C2           1          35,919.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,273      context-switches          #    0.063 K/sec                  
S0-C2           1                 75      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             44,590      page-faults               #    0.001 M/sec                  
S0-C2           1      2,521,014,918      cycles                    #    0.070 GHz                    
S0-C2           1        975,993,566      instructions              #    0.39  insn per cycle         
S0-C2           1      1,125,654,592      branches                  #   31.338 M/sec                  
S0-C2           1        332,282,649      branch-misses             #   29.52% of all branches        
S0-C3           1          35,919.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,546      context-switches          #    0.071 K/sec                  
S0-C3           1                 70      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             44,775      page-faults               #    0.001 M/sec                  
S0-C3           1      2,389,658,187      cycles                    #    0.067 GHz                    
S0-C3           1        980,391,485      instructions              #    0.41  insn per cycle         
S0-C3           1      1,127,036,608      branches                  #   31.376 M/sec                  
S0-C3           1        329,626,727      branch-misses             #   29.25% of all branches        

      35.920726525 seconds time elapsed

================================================================================
================================================================================
perf stat -o 099_go.log --per-core -a taskset -c 0-3 ./spec95_099_go.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 00:50:23 2021


 Performance counter stats for 'system wide':

S0-C0           1          49,727.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,520      context-switches          #    0.191 K/sec                  
S0-C0           1                 49      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                356      page-faults               #    0.007 K/sec                  
S0-C0           1      2,108,290,479      cycles                    #    0.042 GHz                    
S0-C0           1      1,382,469,081      instructions              #    0.66  insn per cycle         
S0-C0           1      2,636,882,008      branches                  #   53.026 M/sec                  
S0-C0           1      1,082,057,625      branch-misses             #   41.04% of all branches        
S0-C1           1          49,727.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,592      context-switches          #    0.032 K/sec                  
S0-C1           1                 24      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                419      page-faults               #    0.008 K/sec                  
S0-C1           1      1,968,359,932      cycles                    #    0.040 GHz                    
S0-C1           1      1,316,340,342      instructions              #    0.67  insn per cycle         
S0-C1           1      2,627,848,428      branches                  #   52.845 M/sec                  
S0-C1           1      1,079,273,258      branch-misses             #   41.07% of all branches        
S0-C2           1          49,727.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,951      context-switches          #    0.039 K/sec                  
S0-C2           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                475      page-faults               #    0.010 K/sec                  
S0-C2           1      1,981,785,549      cycles                    #    0.040 GHz                    
S0-C2           1      1,321,789,383      instructions              #    0.67  insn per cycle         
S0-C2           1      2,628,542,803      branches                  #   52.859 M/sec                  
S0-C2           1      1,079,541,894      branch-misses             #   41.07% of all branches        
S0-C3           1          49,727.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,053      context-switches          #    0.041 K/sec                  
S0-C3           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                278      page-faults               #    0.006 K/sec                  
S0-C3           1      1,809,232,990      cycles                    #    0.036 GHz                    
S0-C3           1      1,318,192,344      instructions              #    0.73  insn per cycle         
S0-C3           1      2,628,180,288      branches                  #   52.851 M/sec                  
S0-C3           1      1,079,396,751      branch-misses             #   41.07% of all branches        

      49.728797653 seconds time elapsed

================================================================================
perf stat -o 101_tomcatv.log --per-core -a taskset -c 0-3 ./spec95_101_tomcatv.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 00:51:13 2021


 Performance counter stats for 'system wide':

S0-C0           1          79,103.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             15,077      context-switches          #    0.191 K/sec                  
S0-C0           1                 95      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              3,909      page-faults               #    0.049 K/sec                  
S0-C0           1        286,277,509      cycles                    #    0.004 GHz                    
S0-C0           1      3,222,512,574      instructions              #   11.26  insn per cycle         
S0-C0           1        857,381,122      branches                  #   10.839 M/sec                  
S0-C0           1         33,478,941      branch-misses             #    3.90% of all branches        
S0-C1           1          79,103.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,005      context-switches          #    0.051 K/sec                  
S0-C1           1                 57      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              3,795      page-faults               #    0.048 K/sec                  
S0-C1           1      4,251,437,240      cycles                    #    0.054 GHz                    
S0-C1           1      3,169,562,855      instructions              #    0.75  insn per cycle         
S0-C1           1        843,535,384      branches                  #   10.664 M/sec                  
S0-C1           1         29,691,039      branch-misses             #    3.52% of all branches        
S0-C2           1          79,103.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,113      context-switches          #    0.052 K/sec                  
S0-C2           1                 53      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              3,896      page-faults               #    0.049 K/sec                  
S0-C2           1        360,980,420      cycles                    #    0.005 GHz                    
S0-C2           1      3,246,569,710      instructions              #    8.99  insn per cycle         
S0-C2           1        848,248,368      branches                  #   10.723 M/sec                  
S0-C2           1         30,024,645      branch-misses             #    3.54% of all branches        
S0-C3           1          79,103.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              9,061      context-switches          #    0.115 K/sec                  
S0-C3           1                 43      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              3,993      page-faults               #    0.050 K/sec                  
S0-C3           1        115,603,524      cycles                    #    0.001 GHz                    
S0-C3           1      3,209,602,606      instructions              #   27.76  insn per cycle         
S0-C3           1        848,774,506      branches                  #   10.730 M/sec                  
S0-C3           1         30,871,715      branch-misses             #    3.64% of all branches        

      79.104939890 seconds time elapsed

================================================================================
perf stat -o 102_swim.log --per-core -a taskset -c 0-3 ./spec95_102_swim.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 00:52:32 2021


 Performance counter stats for 'system wide':

S0-C0           1          67,281.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             10,751      context-switches          #    0.160 K/sec                  
S0-C0           1                 60      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              4,041      page-faults               #    0.060 K/sec                  
S0-C0           1      2,333,066,744      cycles                    #    0.035 GHz                    
S0-C0           1      1,837,346,620      instructions              #    0.79  insn per cycle         
S0-C0           1        193,490,416      branches                  #    2.876 M/sec                  
S0-C0           1          5,692,493      branch-misses             #    2.94% of all branches        
S0-C1           1          67,281.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,620      context-switches          #    0.054 K/sec                  
S0-C1           1                 47      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              4,241      page-faults               #    0.063 K/sec                  
S0-C1           1      1,961,906,194      cycles                    #    0.029 GHz                    
S0-C1           1      1,791,498,112      instructions              #    0.91  insn per cycle         
S0-C1           1        185,841,879      branches                  #    2.762 M/sec                  
S0-C1           1          3,833,337      branch-misses             #    2.06% of all branches        
S0-C2           1          67,281.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              7,896      context-switches          #    0.117 K/sec                  
S0-C2           1                 39      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              3,792      page-faults               #    0.056 K/sec                  
S0-C2           1      2,186,984,521      cycles                    #    0.033 GHz                    
S0-C2           1      1,793,274,844      instructions              #    0.82  insn per cycle         
S0-C2           1        186,542,723      branches                  #    2.773 M/sec                  
S0-C2           1          4,171,861      branch-misses             #    2.24% of all branches        
S0-C3           1          67,281.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,375      context-switches          #    0.050 K/sec                  
S0-C3           1                 36      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              4,105      page-faults               #    0.061 K/sec                  
S0-C3           1      1,952,248,562      cycles                    #    0.029 GHz                    
S0-C3           1      1,766,978,359      instructions              #    0.91  insn per cycle         
S0-C3           1        183,455,797      branches                  #    2.727 M/sec                  
S0-C3           1          3,677,384      branch-misses             #    2.00% of all branches        

      67.282390606 seconds time elapsed

================================================================================
perf stat -o 103_su2cor.log --per-core -a taskset -c 0-3 ./spec95_103_su2cor.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 00:53:39 2021


 Performance counter stats for 'system wide':

S0-C0           1         116,860.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             13,526      context-switches          #    0.116 K/sec                  
S0-C0           1                 95      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              6,255      page-faults               #    0.054 K/sec                  
S0-C0           1        825,657,034      cycles                    #    0.007 GHz                    
S0-C0           1      4,265,283,164      instructions              #    5.17  insn per cycle         
S0-C0           1      1,203,748,967      branches                  #   10.301 M/sec                  
S0-C0           1        109,666,218      branch-misses             #    9.11% of all branches        
S0-C1           1         116,860.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,215      context-switches          #    0.045 K/sec                  
S0-C1           1                 55      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,327      page-faults               #    0.054 K/sec                  
S0-C1           1      4,277,491,012      cycles                    #    0.037 GHz                    
S0-C1           1      4,183,932,555      instructions              #    0.98  insn per cycle         
S0-C1           1      1,191,784,893      branches                  #   10.198 M/sec                  
S0-C1           1        107,118,421      branch-misses             #    8.99% of all branches        
S0-C2           1         116,860.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             11,412      context-switches          #    0.098 K/sec                  
S0-C2           1                 38      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,205      page-faults               #    0.053 K/sec                  
S0-C2           1        747,908,400      cycles                    #    0.006 GHz                    
S0-C2           1      4,228,862,945      instructions              #    5.65  insn per cycle         
S0-C2           1      1,197,560,415      branches                  #   10.248 M/sec                  
S0-C2           1        108,230,047      branch-misses             #    9.04% of all branches        
S0-C3           1         116,860.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,025      context-switches          #    0.060 K/sec                  
S0-C3           1                 47      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,113      page-faults               #    0.052 K/sec                  
S0-C3           1        833,640,587      cycles                    #    0.007 GHz                    
S0-C3           1      4,188,702,003      instructions              #    5.02  insn per cycle         
S0-C3           1      1,192,671,095      branches                  #   10.206 M/sec                  
S0-C3           1        107,478,633      branch-misses             #    9.01% of all branches        

     116.861972109 seconds time elapsed

================================================================================
perf stat -o 104_hydro2d.log --per-core -a taskset -c 0-3 ./spec95_104_hydro2d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 00:55:36 2021


 Performance counter stats for 'system wide':

S0-C0           1          96,459.82 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             10,109      context-switches          #    0.105 K/sec                  
S0-C0           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,575      page-faults               #    0.027 K/sec                  
S0-C0           1        853,329,882      cycles                    #    0.009 GHz                    
S0-C0           1      1,452,208,990      instructions              #    1.70  insn per cycle         
S0-C0           1      2,617,719,167      branches                  #   27.138 M/sec                  
S0-C0           1         21,238,780      branch-misses             #    0.81% of all branches        
S0-C1           1          96,459.82 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,839      context-switches          #    0.050 K/sec                  
S0-C1           1                 17      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,584      page-faults               #    0.027 K/sec                  
S0-C1           1        627,195,179      cycles                    #    0.007 GHz                    
S0-C1           1      1,396,466,849      instructions              #    2.23  insn per cycle         
S0-C1           1      2,609,480,923      branches                  #   27.053 M/sec                  
S0-C1           1         19,421,647      branch-misses             #    0.74% of all branches        
S0-C2           1          96,459.82 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,309      context-switches          #    0.045 K/sec                  
S0-C2           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,344      page-faults               #    0.024 K/sec                  
S0-C2           1        683,724,020      cycles                    #    0.007 GHz                    
S0-C2           1      1,388,634,136      instructions              #    2.03  insn per cycle         
S0-C2           1      2,608,525,917      branches                  #   27.043 M/sec                  
S0-C2           1         19,191,568      branch-misses             #    0.74% of all branches        
S0-C3           1          96,459.82 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              9,456      context-switches          #    0.098 K/sec                  
S0-C3           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,348      page-faults               #    0.024 K/sec                  
S0-C3           1        756,744,961      cycles                    #    0.008 GHz                    
S0-C3           1      1,428,984,867      instructions              #    1.89  insn per cycle         
S0-C3           1      2,613,821,894      branches                  #   27.098 M/sec                  
S0-C3           1         20,416,670      branch-misses             #    0.78% of all branches        

      96.459537403 seconds time elapsed

================================================================================
perf stat -o 107_mgrid.log --per-core -a taskset -c 0-3 ./spec95_107_mgrid.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 00:57:13 2021


 Performance counter stats for 'system wide':

S0-C0           1          97,934.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             20,904      context-switches          #    0.213 K/sec                  
S0-C0           1                 39      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,200      page-faults               #    0.022 K/sec                  
S0-C0           1        625,720,536      cycles                    #    0.006 GHz                    
S0-C0           1        335,643,212      instructions              #    0.54  insn per cycle         
S0-C0           1        737,331,493      branches                  #    7.529 M/sec                  
S0-C0           1         40,048,379      branch-misses             #    5.43% of all branches        
S0-C1           1          97,934.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,026      context-switches          #    0.051 K/sec                  
S0-C1           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,148      page-faults               #    0.022 K/sec                  
S0-C1           1      4,223,506,718      cycles                    #    0.043 GHz                    
S0-C1           1        154,116,952      instructions              #    0.04  insn per cycle         
S0-C1           1        711,463,398      branches                  #    7.265 M/sec                  
S0-C1           1         34,507,578      branch-misses             #    4.85% of all branches        
S0-C2           1          97,934.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              8,825      context-switches          #    0.090 K/sec                  
S0-C2           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,258      page-faults               #    0.023 K/sec                  
S0-C2           1      4,237,140,164      cycles                    #    0.043 GHz                    
S0-C2           1        190,173,183      instructions              #    0.04  insn per cycle         
S0-C2           1        716,057,615      branches                  #    7.312 M/sec                  
S0-C2           1         35,478,461      branch-misses             #    4.95% of all branches        
S0-C3           1          97,934.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,872      context-switches          #    0.050 K/sec                  
S0-C3           1                 30      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,059      page-faults               #    0.021 K/sec                  
S0-C3           1      4,150,211,186      cycles                    #    0.042 GHz                    
S0-C3           1        154,346,908      instructions              #    0.04  insn per cycle         
S0-C3           1        711,672,798      branches                  #    7.267 M/sec                  
S0-C3           1         34,609,983      branch-misses             #    4.86% of all branches        

      97.934926595 seconds time elapsed

================================================================================
perf stat -o 110_applu.log --per-core -a taskset -c 0-3 ./spec95_110_applu.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 00:58:51 2021


 Performance counter stats for 'system wide':

S0-C0           1          84,811.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,279      context-switches          #    0.098 K/sec                  
S0-C0           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              7,789      page-faults               #    0.092 K/sec                  
S0-C0           1        331,458,767      cycles                    #    0.004 GHz                    
S0-C0           1        428,047,223      instructions              #    1.29  insn per cycle         
S0-C0           1        350,352,237      branches                  #    4.131 M/sec                  
S0-C0           1         19,182,385      branch-misses             #    5.48% of all branches        
S0-C1           1          84,811.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              8,328      context-switches          #    0.098 K/sec                  
S0-C1           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              7,551      page-faults               #    0.089 K/sec                  
S0-C1           1        320,875,320      cycles                    #    0.004 GHz                    
S0-C1           1        416,926,521      instructions              #    1.30  insn per cycle         
S0-C1           1        348,143,136      branches                  #    4.105 M/sec                  
S0-C1           1         18,643,326      branch-misses             #    5.36% of all branches        
S0-C2           1          84,811.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,511      context-switches          #    0.041 K/sec                  
S0-C2           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              7,555      page-faults               #    0.089 K/sec                  
S0-C2           1        303,739,638      cycles                    #    0.004 GHz                    
S0-C2           1        380,799,163      instructions              #    1.25  insn per cycle         
S0-C2           1        343,513,920      branches                  #    4.050 M/sec                  
S0-C2           1         17,674,979      branch-misses             #    5.15% of all branches        
S0-C3           1          84,811.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,400      context-switches          #    0.052 K/sec                  
S0-C3           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              7,769      page-faults               #    0.092 K/sec                  
S0-C3           1        325,979,720      cycles                    #    0.004 GHz                    
S0-C3           1        389,469,903      instructions              #    1.19  insn per cycle         
S0-C3           1        344,727,185      branches                  #    4.065 M/sec                  
S0-C3           1         18,001,028      branch-misses             #    5.22% of all branches        

      84.812260470 seconds time elapsed

================================================================================
perf stat -o 125_turb3d.log --per-core -a taskset -c 0-3 ./spec95_125_turb3d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:00:16 2021


 Performance counter stats for 'system wide':

S0-C0           1         104,764.55 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,361      context-switches          #    0.080 K/sec                  
S0-C0           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,779      page-faults               #    0.065 K/sec                  
S0-C0           1      3,013,813,427      cycles                    #    0.029 GHz                    
S0-C0           1      1,862,616,817      instructions              #    0.62  insn per cycle         
S0-C0           1      3,572,036,741      branches                  #   34.096 M/sec                  
S0-C0           1        288,742,718      branch-misses             #    8.08% of all branches        
S0-C1           1         104,764.55 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,871      context-switches          #    0.046 K/sec                  
S0-C1           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,535      page-faults               #    0.062 K/sec                  
S0-C1           1      2,277,855,750      cycles                    #    0.022 GHz                    
S0-C1           1      1,813,790,203      instructions              #    0.80  insn per cycle         
S0-C1           1      3,564,889,372      branches                  #   34.028 M/sec                  
S0-C1           1        287,435,270      branch-misses             #    8.06% of all branches        
S0-C2           1         104,764.55 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,690      context-switches          #    0.045 K/sec                  
S0-C2           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,760      page-faults               #    0.065 K/sec                  
S0-C2           1      2,460,316,851      cycles                    #    0.023 GHz                    
S0-C2           1      1,818,134,637      instructions              #    0.74  insn per cycle         
S0-C2           1      3,565,387,183      branches                  #   34.032 M/sec                  
S0-C2           1        290,225,993      branch-misses             #    8.14% of all branches        
S0-C3           1         104,764.55 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             12,863      context-switches          #    0.123 K/sec                  
S0-C3           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,536      page-faults               #    0.062 K/sec                  
S0-C3           1      2,957,919,997      cycles                    #    0.028 GHz                    
S0-C3           1      1,868,473,838      instructions              #    0.63  insn per cycle         
S0-C3           1      3,572,117,522      branches                  #   34.097 M/sec                  
S0-C3           1        292,508,210      branch-misses             #    8.19% of all branches        

     104.765437849 seconds time elapsed

================================================================================
perf stat -o 126_gcc.log --per-core -a taskset -c 0-3 ./spec95_126_gcc.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:02:00 2021


 Performance counter stats for 'system wide':

S0-C0           1           6,708.29 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1                997      context-switches          #    0.149 K/sec                  
S0-C0           1                 21      cpu-migrations            #    0.003 K/sec                  
S0-C0           1              4,679      page-faults               #    0.697 K/sec                  
S0-C0           1      3,978,151,978      cycles                    #    0.593 GHz                    
S0-C0           1      3,329,735,060      instructions              #    0.84  insn per cycle         
S0-C0           1        456,186,624      branches                  #   68.003 M/sec                  
S0-C0           1        117,163,213      branch-misses             #   25.68% of all branches        
S0-C1           1           6,708.29 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                597      context-switches          #    0.089 K/sec                  
S0-C1           1                 18      cpu-migrations            #    0.003 K/sec                  
S0-C1           1              4,345      page-faults               #    0.648 K/sec                  
S0-C1           1      3,834,293,666      cycles                    #    0.572 GHz                    
S0-C1           1      3,342,567,815      instructions              #    0.87  insn per cycle         
S0-C1           1        457,621,966      branches                  #   68.217 M/sec                  
S0-C1           1        116,853,474      branch-misses             #   25.53% of all branches        
S0-C2           1           6,708.29 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                778      context-switches          #    0.116 K/sec                  
S0-C2           1                 13      cpu-migrations            #    0.002 K/sec                  
S0-C2           1              4,524      page-faults               #    0.674 K/sec                  
S0-C2           1      3,921,826,914      cycles                    #    0.585 GHz                    
S0-C2           1      3,330,036,270      instructions              #    0.85  insn per cycle         
S0-C2           1        456,273,033      branches                  #   68.016 M/sec                  
S0-C2           1        117,142,767      branch-misses             #   25.67% of all branches        
S0-C3           1           6,708.29 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                564      context-switches          #    0.084 K/sec                  
S0-C3           1                 11      cpu-migrations            #    0.002 K/sec                  
S0-C3           1              4,500      page-faults               #    0.671 K/sec                  
S0-C3           1      3,834,142,054      cycles                    #    0.572 GHz                    
S0-C3           1      3,334,078,091      instructions              #    0.87  insn per cycle         
S0-C3           1        456,792,390      branches                  #   68.094 M/sec                  
S0-C3           1        116,951,042      branch-misses             #   25.60% of all branches        

       6.708639807 seconds time elapsed

================================================================================
perf stat -o 129_compress.log --per-core -a taskset -c 0-3 ./spec95_129_compress.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:02:08 2021


 Performance counter stats for 'system wide':

S0-C0           1         175,456.03 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             29,316      context-switches          #    0.167 K/sec                  
S0-C0           1                 43      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              9,263      page-faults               #    0.053 K/sec                  
S0-C0           1        112,811,695      cycles                    #    0.001 GHz                    
S0-C0           1      1,396,036,051      instructions              #   12.37  insn per cycle         
S0-C0           1      3,690,190,070      branches                  #   21.032 M/sec                  
S0-C0           1        619,612,034      branch-misses             #   16.79% of all branches        
S0-C1           1         175,456.03 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              6,011      context-switches          #    0.034 K/sec                  
S0-C1           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,244      page-faults               #    0.053 K/sec                  
S0-C1           1      4,027,558,665      cycles                    #    0.023 GHz                    
S0-C1           1      1,154,768,843      instructions              #    0.29  insn per cycle         
S0-C1           1      3,655,980,045      branches                  #   20.837 M/sec                  
S0-C1           1        612,133,937      branch-misses             #   16.74% of all branches        
S0-C2           1         175,456.03 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              7,102      context-switches          #    0.040 K/sec                  
S0-C2           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,165      page-faults               #    0.052 K/sec                  
S0-C2           1      2,298,452,933      cycles                    #    0.013 GHz                    
S0-C2           1      1,159,704,182      instructions              #    0.50  insn per cycle         
S0-C2           1      3,656,624,139      branches                  #   20.841 M/sec                  
S0-C2           1        612,317,329      branch-misses             #   16.75% of all branches        
S0-C3           1         175,456.03 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             21,667      context-switches          #    0.123 K/sec                  
S0-C3           1                 29      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,259      page-faults               #    0.053 K/sec                  
S0-C3           1        733,418,876      cycles                    #    0.004 GHz                    
S0-C3           1      1,255,306,302      instructions              #    1.71  insn per cycle         
S0-C3           1      3,669,288,874      branches                  #   20.913 M/sec                  
S0-C3           1        615,399,212      branch-misses             #   16.77% of all branches        

     175.457692116 seconds time elapsed

================================================================================
perf stat -o 130_li.log --per-core -a taskset -c 0-3 ./spec95_130_li.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:05:04 2021


 Performance counter stats for 'system wide':

S0-C0           1          81,453.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,940      context-switches          #    0.097 K/sec                  
S0-C0           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                442      page-faults               #    0.005 K/sec                  
S0-C0           1      1,359,336,789      cycles                    #    0.017 GHz                    
S0-C0           1      1,000,014,139      instructions              #    0.74  insn per cycle         
S0-C0           1      1,824,662,534      branches                  #   22.401 M/sec                  
S0-C0           1      1,040,417,717      branch-misses             #   57.02% of all branches        
S0-C1           1          81,453.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,302      context-switches          #    0.041 K/sec                  
S0-C1           1                 24      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                345      page-faults               #    0.004 K/sec                  
S0-C1           1      1,240,275,587      cycles                    #    0.015 GHz                    
S0-C1           1        955,526,939      instructions              #    0.77  insn per cycle         
S0-C1           1      1,818,261,288      branches                  #   22.323 M/sec                  
S0-C1           1      1,038,755,595      branch-misses             #   57.13% of all branches        
S0-C2           1          81,453.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,277      context-switches          #    0.040 K/sec                  
S0-C2           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                295      page-faults               #    0.004 K/sec                  
S0-C2           1      1,384,259,845      cycles                    #    0.017 GHz                    
S0-C2           1        955,211,468      instructions              #    0.69  insn per cycle         
S0-C2           1      1,818,153,717      branches                  #   22.321 M/sec                  
S0-C2           1      1,038,751,952      branch-misses             #   57.13% of all branches        
S0-C3           1          81,453.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             10,172      context-switches          #    0.125 K/sec                  
S0-C3           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                562      page-faults               #    0.007 K/sec                  
S0-C3           1      1,349,322,948      cycles                    #    0.017 GHz                    
S0-C3           1      1,003,668,162      instructions              #    0.74  insn per cycle         
S0-C3           1      1,824,559,133      branches                  #   22.400 M/sec                  
S0-C3           1      1,040,983,662      branch-misses             #   57.05% of all branches        

      81.454206040 seconds time elapsed

================================================================================
perf stat -o 132_ijpeg.log --per-core -a taskset -c 0-3 ./spec95_132_ijpeg.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:06:25 2021


 Performance counter stats for 'system wide':

S0-C0           1          23,107.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              2,511      context-switches          #    0.109 K/sec                  
S0-C0           1                 11      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,334      page-faults               #    0.101 K/sec                  
S0-C0           1      2,816,366,490      cycles                    #    0.122 GHz                    
S0-C0           1        191,345,017      instructions              #    0.07  insn per cycle         
S0-C0           1      1,106,429,667      branches                  #   47.882 M/sec                  
S0-C0           1        202,117,672      branch-misses             #   18.27% of all branches        
S0-C1           1          23,107.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,754      context-switches          #    0.076 K/sec                  
S0-C1           1                 11      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,135      page-faults               #    0.136 K/sec                  
S0-C1           1      2,931,455,501      cycles                    #    0.127 GHz                    
S0-C1           1        295,645,899      instructions              #    0.10  insn per cycle         
S0-C1           1      1,124,596,621      branches                  #   48.668 M/sec                  
S0-C1           1        201,938,182      branch-misses             #   17.96% of all branches        
S0-C2           1          23,107.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,785      context-switches          #    0.077 K/sec                  
S0-C2           1                 23      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              2,562      page-faults               #    0.111 K/sec                  
S0-C2           1      3,473,253,846      cycles                    #    0.150 GHz                    
S0-C2           1      1,845,697,158      instructions              #    0.53  insn per cycle         
S0-C2           1        969,228,997      branches                  #   41.945 M/sec                  
S0-C2           1        164,856,687      branch-misses             #   17.01% of all branches        
S0-C3           1          23,107.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,781      context-switches          #    0.077 K/sec                  
S0-C3           1                 18      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              2,713      page-faults               #    0.117 K/sec                  
S0-C3           1      1,607,415,602      cycles                    #    0.070 GHz                    
S0-C3           1      3,718,732,766      instructions              #    2.31  insn per cycle         
S0-C3           1      1,066,672,822      branches                  #   46.162 M/sec                  
S0-C3           1        187,937,342      branch-misses             #   17.62% of all branches        

      23.107847857 seconds time elapsed

================================================================================
perf stat -o 134_perl.log --per-core -a taskset -c 0-3 ./spec95_134_perl.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:06:48 2021


 Performance counter stats for 'system wide':

S0-C0           1          31,918.99 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              3,178      context-switches          #    0.100 K/sec                  
S0-C0           1                 17      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              9,300      page-faults               #    0.291 K/sec                  
S0-C0           1      1,091,707,144      cycles                    #    0.034 GHz                    
S0-C0           1        808,929,098      instructions              #    0.74  insn per cycle         
S0-C0           1      2,727,542,651      branches                  #   85.452 M/sec                  
S0-C0           1        491,996,610      branch-misses             #   18.04% of all branches        
S0-C1           1          31,918.99 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,361      context-switches          #    0.043 K/sec                  
S0-C1           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,391      page-faults               #    0.294 K/sec                  
S0-C1           1        356,889,849      cycles                    #    0.011 GHz                    
S0-C1           1        794,469,363      instructions              #    2.23  insn per cycle         
S0-C1           1      2,725,341,321      branches                  #   85.383 M/sec                  
S0-C1           1        491,399,316      branch-misses             #   18.03% of all branches        
S0-C2           1          31,918.99 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,750      context-switches          #    0.055 K/sec                  
S0-C2           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,161      page-faults               #    0.287 K/sec                  
S0-C2           1      1,174,914,938      cycles                    #    0.037 GHz                    
S0-C2           1        792,121,907      instructions              #    0.67  insn per cycle         
S0-C2           1      2,725,118,260      branches                  #   85.376 M/sec                  
S0-C2           1        491,514,166      branch-misses             #   18.04% of all branches        
S0-C3           1          31,918.99 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,597      context-switches          #    0.113 K/sec                  
S0-C3           1                 12      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,263      page-faults               #    0.290 K/sec                  
S0-C3           1        648,775,389      cycles                    #    0.020 GHz                    
S0-C3           1        805,640,959      instructions              #    1.24  insn per cycle         
S0-C3           1      2,726,869,829      branches                  #   85.431 M/sec                  
S0-C3           1        491,976,134      branch-misses             #   18.04% of all branches        

      31.919593180 seconds time elapsed

================================================================================
perf stat -o 141_apsi.log --per-core -a taskset -c 0-3 ./spec95_141_apsi.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:07:20 2021


 Performance counter stats for 'system wide':

S0-C0           1          68,759.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             22,361      context-switches          #    0.325 K/sec                  
S0-C0           1                 74      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              1,304      page-faults               #    0.019 K/sec                  
S0-C0           1      3,555,956,661      cycles                    #    0.052 GHz                    
S0-C0           1      2,256,791,837      instructions              #    0.63  insn per cycle         
S0-C0           1        894,625,226      branches                  #   13.011 M/sec                  
S0-C0           1         45,227,328      branch-misses             #    5.06% of all branches        
S0-C1           1          68,759.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,689      context-switches          #    0.068 K/sec                  
S0-C1           1                 49      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              1,929      page-faults               #    0.028 K/sec                  
S0-C1           1      3,005,040,059      cycles                    #    0.044 GHz                    
S0-C1           1      2,110,503,982      instructions              #    0.70  insn per cycle         
S0-C1           1        871,978,550      branches                  #   12.682 M/sec                  
S0-C1           1         39,831,547      branch-misses             #    4.57% of all branches        
S0-C2           1          68,759.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,077      context-switches          #    0.059 K/sec                  
S0-C2           1                 57      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              1,194      page-faults               #    0.017 K/sec                  
S0-C2           1      2,968,414,928      cycles                    #    0.043 GHz                    
S0-C2           1      2,053,888,424      instructions              #    0.69  insn per cycle         
S0-C2           1        867,810,740      branches                  #   12.621 M/sec                  
S0-C2           1         39,279,999      branch-misses             #    4.53% of all branches        
S0-C3           1          68,759.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,474      context-switches          #    0.065 K/sec                  
S0-C3           1                 50      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              1,106      page-faults               #    0.016 K/sec                  
S0-C3           1      4,209,280,259      cycles                    #    0.061 GHz                    
S0-C3           1      2,066,073,235      instructions              #    0.49  insn per cycle         
S0-C3           1        868,101,445      branches                  #   12.625 M/sec                  
S0-C3           1         39,166,326      branch-misses             #    4.51% of all branches        

      68.760835687 seconds time elapsed

================================================================================
perf stat -o 145_fpppp.log --per-core -a taskset -c 0-3 ./spec95_145_fpppp.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:08:29 2021


 Performance counter stats for 'system wide':

S0-C0           1         153,614.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             22,856      context-switches          #    0.149 K/sec                  
S0-C0           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                340      page-faults               #    0.002 K/sec                  
S0-C0           1        186,850,871      cycles                    #    0.001 GHz                    
S0-C0           1      3,792,363,574      instructions              #   20.30  insn per cycle         
S0-C0           1      1,279,769,174      branches                  #    8.331 M/sec                  
S0-C0           1        124,897,049      branch-misses             #    9.76% of all branches        
S0-C1           1         153,614.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              9,640      context-switches          #    0.063 K/sec                  
S0-C1           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                391      page-faults               #    0.003 K/sec                  
S0-C1           1        682,743,661      cycles                    #    0.004 GHz                    
S0-C1           1      3,664,659,629      instructions              #    5.37  insn per cycle         
S0-C1           1      1,262,199,188      branches                  #    8.217 M/sec                  
S0-C1           1        120,507,467      branch-misses             #    9.55% of all branches        
S0-C2           1         153,614.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              6,447      context-switches          #    0.042 K/sec                  
S0-C2           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                430      page-faults               #    0.003 K/sec                  
S0-C2           1         66,052,681      cycles                    #    0.000 GHz                    
S0-C2           1      3,650,552,148      instructions              #   55.27  insn per cycle         
S0-C2           1      1,260,256,744      branches                  #    8.204 M/sec                  
S0-C2           1        119,721,631      branch-misses             #    9.50% of all branches        
S0-C3           1         153,614.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,594      context-switches          #    0.036 K/sec                  
S0-C3           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                252      page-faults               #    0.002 K/sec                  
S0-C3           1        113,747,490      cycles                    #    0.001 GHz                    
S0-C3           1      3,646,498,510      instructions              #   32.06  insn per cycle         
S0-C3           1      1,259,942,549      branches                  #    8.202 M/sec                  
S0-C3           1        119,602,019      branch-misses             #    9.49% of all branches        

     153.616801536 seconds time elapsed

================================================================================
perf stat -o 146_wave5.log --per-core -a taskset -c 0-3 ./spec95_146_wave5.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:11:03 2021


 Performance counter stats for 'system wide':

S0-C0           1          70,520.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             11,261      context-switches          #    0.160 K/sec                  
S0-C0           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C0           1             10,590      page-faults               #    0.150 K/sec                  
S0-C0           1      2,977,311,493      cycles                    #    0.042 GHz                    
S0-C0           1      2,587,108,966      instructions              #    0.87  insn per cycle         
S0-C0           1      1,330,446,486      branches                  #   18.866 M/sec                  
S0-C0           1         17,717,298      branch-misses             #    1.33% of all branches        
S0-C1           1          70,520.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,753      context-switches          #    0.053 K/sec                  
S0-C1           1                 14      cpu-migrations            #    0.000 K/sec                  
S0-C1           1             10,602      page-faults               #    0.150 K/sec                  
S0-C1           1      2,106,018,489      cycles                    #    0.030 GHz                    
S0-C1           1      2,520,850,219      instructions              #    1.20  insn per cycle         
S0-C1           1      1,321,304,496      branches                  #   18.737 M/sec                  
S0-C1           1         15,516,038      branch-misses             #    1.17% of all branches        
S0-C2           1          70,520.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,639      context-switches          #    0.023 K/sec                  
S0-C2           1                 12      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             10,482      page-faults               #    0.149 K/sec                  
S0-C2           1      2,841,556,744      cycles                    #    0.040 GHz                    
S0-C2           1      2,509,890,510      instructions              #    0.88  insn per cycle         
S0-C2           1      1,319,805,056      branches                  #   18.715 M/sec                  
S0-C2           1         15,129,238      branch-misses             #    1.15% of all branches        
S0-C3           1          70,520.32 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,634      context-switches          #    0.052 K/sec                  
S0-C3           1                 14      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             10,723      page-faults               #    0.152 K/sec                  
S0-C3           1      2,042,614,942      cycles                    #    0.029 GHz                    
S0-C3           1      2,519,070,256      instructions              #    1.23  insn per cycle         
S0-C3           1      1,321,169,678      branches                  #   18.735 M/sec                  
S0-C3           1         15,541,486      branch-misses             #    1.18% of all branches        

      70.521344197 seconds time elapsed

================================================================================
perf stat -o 147_vortex.log --per-core -a taskset -c 0-3 ./spec95_147_vortex.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 01:12:13 2021


 Performance counter stats for 'system wide':

S0-C0           1          97,019.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             23,272      context-switches          #    0.240 K/sec                  
S0-C0           1                103      cpu-migrations            #    0.001 K/sec                  
S0-C0           1             11,988      page-faults               #    0.124 K/sec                  
S0-C0           1         50,117,018      cycles                    #    0.001 GHz                    
S0-C0           1      3,605,851,596      instructions              #   71.95  insn per cycle         
S0-C0           1      1,565,902,376      branches                  #   16.140 M/sec                  
S0-C0           1        391,687,674      branch-misses             #   25.01% of all branches        
S0-C1           1          97,019.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,763      context-switches          #    0.039 K/sec                  
S0-C1           1                 59      cpu-migrations            #    0.001 K/sec                  
S0-C1           1             11,877      page-faults               #    0.122 K/sec                  
S0-C1           1        205,806,831      cycles                    #    0.002 GHz                    
S0-C1           1      3,405,341,239      instructions              #   16.55  insn per cycle         
S0-C1           1      1,537,677,872      branches                  #   15.849 M/sec                  
S0-C1           1        384,130,398      branch-misses             #   24.98% of all branches        
S0-C2           1          97,019.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,943      context-switches          #    0.041 K/sec                  
S0-C2           1                 72      cpu-migrations            #    0.001 K/sec                  
S0-C2           1             11,944      page-faults               #    0.123 K/sec                  
S0-C2           1      3,360,269,320      cycles                    #    0.035 GHz                    
S0-C2           1      3,410,783,318      instructions              #    1.02  insn per cycle         
S0-C2           1      1,538,360,811      branches                  #   15.856 M/sec                  
S0-C2           1        388,402,895      branch-misses             #   25.25% of all branches        
S0-C3           1          97,019.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             12,069      context-switches          #    0.124 K/sec                  
S0-C3           1                 54      cpu-migrations            #    0.001 K/sec                  
S0-C3           1             12,077      page-faults               #    0.124 K/sec                  
S0-C3           1        564,420,342      cycles                    #    0.006 GHz                    
S0-C3           1      3,466,830,042      instructions              #    6.14  insn per cycle         
S0-C3           1      1,545,823,772      branches                  #   15.933 M/sec                  
S0-C3           1        387,402,477      branch-misses             #   25.06% of all branches        

      97.020374366 seconds time elapsed

================================================================================
perf stat -o aes_benchmark.log --per-core -a taskset -c 0-3 ./aes_benchmark 4
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
# started on Wed Mar  3 01:13:51 2021


 Performance counter stats for 'system wide':

S0-C0           1           6,771.57 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,079      context-switches          #    0.159 K/sec                  
S0-C0           1                  9      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                444      page-faults               #    0.066 K/sec                  
S0-C0           1      4,084,899,691      cycles                    #    0.603 GHz                    
S0-C0           1      3,440,283,600      instructions              #    0.84  insn per cycle         
S0-C0           1        178,591,564      branches                  #   26.374 M/sec                  
S0-C0           1          3,204,823      branch-misses             #    1.79% of all branches        
S0-C1           1           6,771.57 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                430      context-switches          #    0.064 K/sec                  
S0-C1           1                  6      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                441      page-faults               #    0.065 K/sec                  
S0-C1           1      4,064,097,068      cycles                    #    0.600 GHz                    
S0-C1           1      3,434,444,929      instructions              #    0.85  insn per cycle         
S0-C1           1        177,783,468      branches                  #   26.254 M/sec                  
S0-C1           1          2,989,113      branch-misses             #    1.68% of all branches        
S0-C2           1           6,771.57 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                408      context-switches          #    0.060 K/sec                  
S0-C2           1                  4      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                389      page-faults               #    0.057 K/sec                  
S0-C2           1      4,061,919,532      cycles                    #    0.600 GHz                    
S0-C2           1      3,434,078,094      instructions              #    0.85  insn per cycle         
S0-C2           1        177,703,228      branches                  #   26.243 M/sec                  
S0-C2           1          2,972,306      branch-misses             #    1.67% of all branches        
S0-C3           1           6,771.57 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                376      context-switches          #    0.056 K/sec                  
S0-C3           1                  4      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                389      page-faults               #    0.057 K/sec                  
S0-C3           1      4,060,957,575      cycles                    #    0.600 GHz                    
S0-C3           1      3,433,098,093      instructions              #    0.85  insn per cycle         
S0-C3           1        177,617,000      branches                  #   26.230 M/sec                  
S0-C3           1          3,062,922      branch-misses             #    1.72% of all branches        

       6.771898257 seconds time elapsed

================================================================================
This benchmark has been compiled to use 16 threads. You have to repcompile it if you want to use different number of threads. See ../install/setup.sh for details.
cp: cannot stat 'coremark_benchmark.log': No such file or directory
================================================================================
================================================================================
Printing results
./run_all_benchmarks.sh: line 117: rename: command not found
File: wordcounts_perf_output_1614732406757132585.txt
instructions: 5963571
=(642541+759968+4316210+244852)
frequencies: 0.398
=(0.193+0.206+1.084+0.107)/4
ipcs:0.27
=1*(0.27+0.30+0.32+0.18)/4

File: sqlite_4_threads.txt
instructions: 2439322882
=(626422219+605868334+601918026+605114303)
frequencies: 0.192
=(0.204+0.187+0.188+0.188)/4
ipcs:0.40
=1*(0.39+0.41+0.40+0.41)/4

File: word2vec_perf_output_1614732211565345644.txt
instructions: 10265458799
=(2096301963+2160930554+3942186881+2066039401)
frequencies: 0.023
=(0.025+0.023+0.023+0.022)/4
ipcs:1.20
=1*(0.92+1.01+1.85+1.02)/4

File: grep_perf_output_1614732406462321311.txt
instructions: 6705311
=(1239163+823341+3920262+722545)
frequencies: 0.397
=(0.381+0.197+0.849+0.160)/4
ipcs:0.29
=1*(0.22+0.29+0.32+0.31)/4

File: sort_perf_output_1614732407041461330.txt
instructions: 6001271
=(757296+193109+4323534+727332)
frequencies: 0.401
=(0.247+0.088+1.086+0.181)/4
ipcs:0.26
=1*(0.24+0.17+0.32+0.32)/4

File: md5_perf_output_1614732406946184947.txt
instructions: 6019894
=(784910+745391+4363183+126410)
frequencies: 0.359
=(0.234+0.177+0.977+0.048)/4
ipcs:0.27
=1*(0.25+0.31+0.33+0.19)/4

File: kmeans_perf_output_1614732406851713805.txt
instructions: 6218466
=(792122+806843+3820559+798942)
frequencies: 0.413
=(0.243+0.236+0.944+0.230)/4
ipcs:0.28
=1*(0.26+0.27+0.32+0.27)/4

File: NaiveBayes_perf_output_1614732406659744172.txt
instructions: 6359736
=(1262909+226645+4629628+240554)
frequencies: 0.378
=(0.305+0.090+1.007+0.110)/4
ipcs:0.24
=1*(0.29+0.18+0.32+0.15)/4

File: lda_perf_output_1614732406562419299.txt
instructions: 5951441
=(1823759+3371638+592919+163125)
frequencies: 0.347
=(0.480+0.720+0.131+0.059)/4
ipcs:0.29
=1*(0.28+0.34+0.33+0.20)/4

File: word2vec_perf_output_no_branch_1614732211569622396.txt
instructions: 11731089833
=(2564723545+2523518952+3624586333+3018261003)
frequencies: 0.020
=(0.017+0.010+0.028+0.024)/4
ipcs:1.60
=1*(1.53+2.39+1.28+1.22)/4

File: go_word2vec_4_threads.txt
instructions: 7875429316
=(601667805+271040266+3222792937+3779928308)
frequencies: 0.063
=(0.110+0.028+0.044+0.069)/4
ipcs:0.94
=1*(0.14+0.26+1.94+1.44)/4

================================================================================
Finished running benchmarks
================================================================================

